import sys
from PyQt6.QtWidgets import QApplication, QMessageBox
import time
import threading
from BlocAlgo.HanoiIterative import HanoiIterative
from BlocInterface.SimulationMoves import SimulationMoves
from BlocVision.CameraProcessor import CameraProcessor
from BlocInterface.DetectionInterface import DetectionInterface
from BlocRobot.DobotControl import DobotControl
import signal

def main():
    """
    Programme principal pour r√©soudre la Tour de Hano√Ø avec un robot et une cam√©ra.
    """

    print("Program Start:")
    
    # === 1. INITIALISATION DES COMPOSANTS === 
    print("Initialisation du robot...")
    robot = DobotControl()  # Cr√©ation de l'instance du robot
    #robot.execute_init()

    print("Initialisation de la cam√©ra...")
    robot.move_to_and_check(220, -150, 155)
    app = QApplication(sys.argv)
    reply = QMessageBox.information(
        None,
        "Initialisation de la cam√©ra",
        "Voulez-vous lancer l'initialisation de la cam√©ra ?",
        QMessageBox.StandardButton.Ok | QMessageBox.StandardButton.Cancel
    )
    if reply == QMessageBox.StandardButton.Cancel:
        print("Initialisation de la cam√©ra annul√©e par l'utilisateur.")
        robot.disconnect()
        sys.exit(app.exec())
        exit(0)

    print("Initialisation de l'interface...")
    interface = DetectionInterface(app)

    # === 2. ACQUISITION DE L'√âTAT INITIAL ===
    print("Prise de photo pour analyser la tour d'origine...")
    robot.move_to_and_check(230, -90, 155)
    time.sleep(2)
    processor = CameraProcessor()
    frame = processor.capture_image()

    if frame is not None:
        detection_id = int(time.time())
        num_discs, _ = processor.detect_discs(frame, detection_id)
        print(f"Nombre de palets d√©tect√©s : {num_discs}")
    
    #On valide mtn le nombre de palets par l'utilisateur 
    #interface = DetectionInterface(num_discs)
    validated_count = interface.run_detection_workflow()
    if validated_count == -1:
        print("Annulation de la validation.")
        robot.disconnect()
        sys.exit(0)
        exit(0)


    # === 3. CALCUL DES D√âPLACEMENTS SELON L'ALGORITHME DE HANO√è ===
    print("Calcul des d√©placements...")
    robot.move_to_and_check(220, -150, 155)
    algo = HanoiIterative(validated_count)# G√©n√©ration de la liste des d√©placements

    # === 4. EXECUTION DES DEPLACEMENTS PAR LA SIMULATION ===
    simulation = SimulationMoves(algo, app)
    simulation.show()
    app.exec()  # Lancement de l'application PyQt pour la simulation

    # === 4. EX√âCUTION DES D√âPLACEMENTS PAR LE ROBOT ===

    for coup, origine, destination, palets_origin_before, palets_destination_before in algo.get_move_matrix():
        print(f"Ex√©cution du d√©placement {coup}: {origine} -> {destination}")
        robot.realiser_deplacement(origine, destination, palets_origin_before, palets_destination_before)
        
    print("R√©solution de la Tour de Hano√Ø termin√©e !")
    robot.return_to_home()
    robot.disconnect()

    # === 5.FIN DU PROGRAMME ===

    print("Program End.")
    sys.exit(0)
    exit(0)

def signal_handler(sig, frame):
    """
    Gestionnaire pour les signaux syst√®me (ex. Ctrl + C).
    """
    print("\nüî¥ Interruption re√ßue. Arr√™t du programme...")
    sys.exit(0)

def __del__():
    """
    M√©thode de nettoyage pour lib√©rer les ressources.
    """
    # Arr√™ter le main
    print("Arr√™t du programme...")
    sys.exit(0)
    exit(0)

if __name__ == "__main__":
    # Capture des signaux syst√®me (ex. Ctrl + C)
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    main()
    sys.exit(0)
    
#TODO: robot: Commentaires !

#TODO: vision: retirer le bruit sur les images
#TODO: vision: methode deconnexion camera
    
#TODO: interface: methode deconnexion interface
#TODO: interface: ajouter la simulation √† l'interface NOT NECESSARY

#TODO: DOC: Planning r√©el
#TODO: DOC: Slides Soutenance
#TODO: README: Update du readme